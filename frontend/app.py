import streamlit as st
import requests
import random

API_URL = "http://127.0.0.1:8001"

st.title("üìñ –í–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ–π–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
if "role" not in st.session_state:
    st.session_state.role = None
if "username" not in st.session_state:
    st.session_state.username = None
if "words_to_update" not in st.session_state:
    st.session_state.words_to_update = []
if "current_difficulty" not in st.session_state:
    st.session_state.current_difficulty = "easy"
if "current_words" not in st.session_state:
    st.session_state.current_words = []
if "quiz_words" not in st.session_state:
    st.session_state.quiz_words = []
if "current_question" not in st.session_state:
    st.session_state.current_question = 0
if "score" not in st.session_state:
    st.session_state.score = 0
if "show_result" not in st.session_state:
    st.session_state.show_result = False
if "selected_answer" not in st.session_state:
    st.session_state.selected_answer = None
if "is_correct" not in st.session_state:
    st.session_state.is_correct = None
if "current_options" not in st.session_state:
    st.session_state.current_options = None
if "answered_questions" not in st.session_state:
    st.session_state.answered_questions = 0
if "quiz_completed" not in st.session_state:
    st.session_state.quiz_completed = False

# üîë –í—Ö—ñ–¥ –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
if st.session_state.role is None:
    st.subheader("üîë –í—Ö—ñ–¥ –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")

    tab1, tab2 = st.tabs(["üîì –£–≤—ñ–π—Ç–∏", "üÜï –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"])

    with tab1:
        username = st.text_input("–õ–æ–≥—ñ–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

        if st.button("–£–≤—ñ–π—Ç–∏"):
            if username and password:
                try:
                    login_data = {
                        "username": username,
                        "password": password
                    }
                    login_response = requests.post(f"{API_URL}/login/", json=login_data)
                    
                    if login_response.status_code == 200:
                        user_data = login_response.json()
                        st.session_state.username = username
                        st.session_state.user_id = user_data.get("user_id")
                        st.session_state.role = user_data.get("role")
                        st.success("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!")
                        st.rerun()
                    else:
                        error_detail = login_response.json().get("detail", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
                        st.error(f"‚ùå {error_detail}")
                except Exception as e:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: {str(e)}")
            else:
                st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å")

    with tab2:
        new_username = st.text_input("–ù–æ–≤–∏–π –ª–æ–≥—ñ–Ω")
        new_password = st.text_input("–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å", type="password")

        if st.button("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"):
            if new_username and new_password:
                try:
                    register_data = {
                        "username": new_username,
                        "password": new_password
                    }
                    print(f"Sending registration request for user: {new_username}")  # Debug log
                    reg_response = requests.post(f"{API_URL}/register", json=register_data)
                    print(f"Registration response status: {reg_response.status_code}")  # Debug log
                    print(f"Registration response content: {reg_response.text}")  # Debug log
                    
                    if reg_response.status_code == 200:
                        st.success("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                    else:
                        try:
                            error_detail = reg_response.json().get("detail", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞")
                            st.error(f"‚ùå {error_detail}")
                        except:
                            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {reg_response.text}")
                except Exception as e:
                    print(f"Registration error: {str(e)}")  # Debug log
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}")
            else:
                st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")

else:
    # üîÑ –í–∏—Ö—ñ–¥
    st.sidebar.button("üîÑ –í–∏–π—Ç–∏", on_click=lambda: st.session_state.update(
        role=None, username=None, words_to_update=[], current_words=[], quiz_words=[], current_question=0, score=0, show_result=False, selected_answer=None, is_correct=None, current_options=None, quiz_completed=False
    ))

    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤
    tab1, tab2, tab3 = st.tabs(["üìö –í–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤", "üéØ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏"])

    with tab1:
        # üìå –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É)
        if st.session_state.role == "admin":
            st.subheader("üìå –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞")
            new_word = st.text_input("–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ")
            new_translation = st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥")
            new_difficulty = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ", ["easy", "medium", "hard"], key="difficulty_add")

            if st.button("–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ"):
                add_word_response = requests.post(f"{API_URL}/words/add", json={
                    "word": new_word,
                    "translation": new_translation,
                    "difficulty": new_difficulty
                })
                if add_word_response.status_code == 200:
                    st.success("‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                else:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞: {add_word_response.text}")

        # üìù –í–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤
        st.subheader("üìù –í–∏–≤—á–µ–Ω–Ω—è —Å–ª—ñ–≤")
        user_id = st.session_state.user_id
        
        # –í–∏–±—ñ—Ä —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        difficulty = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ", ["easy", "medium", "hard"], 
                                key="difficulty_learn",
                                index=["easy", "medium", "hard"].index(st.session_state.current_difficulty))
        
        if difficulty != st.session_state.current_difficulty:
            st.session_state.current_difficulty = difficulty
            st.session_state.current_words = []
            st.session_state.add_word_mode = False
            st.rerun()

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏
        if not st.session_state.current_words:
            response = requests.get(f"{API_URL}/words/{st.session_state.current_difficulty}")
            if response.status_code == 200:
                st.session_state.current_words = response.json()

        # –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ UI
        if "add_word_mode" not in st.session_state:
            st.session_state.add_word_mode = False
        if st.button("–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ"):
            st.session_state.add_word_mode = True
        if st.session_state.add_word_mode:
            new_word = st.text_input("–°–ª–æ–≤–æ", key="add_word_input")
            new_translation = st.text_input("–ü–µ—Ä–µ–∫–ª–∞–¥", key="add_translation_input")
            if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏"):
                if new_word and new_translation:
                    add_word_response = requests.post(f"{API_URL}/words/add", json={
                        "word": new_word,
                        "translation": new_translation,
                        "difficulty": st.session_state.current_difficulty
                    })
                    if add_word_response.status_code == 200:
                        st.success("‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                        st.session_state.add_word_mode = False
                        # Refresh word list
                        response = requests.get(f"{API_URL}/words/{st.session_state.current_difficulty}")
                        if response.status_code == 200:
                            st.session_state.current_words = response.json()
                        st.rerun()
                    else:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞: {add_word_response.text}")
                        st.session_state.add_word_mode = False
                        st.rerun()

        # –ü–æ–∫–∞–∑ —Å–ª—ñ–≤
        if st.session_state.current_words:
            # Fetch user progress for known words
            try:
                progress_response = requests.get(f"{API_URL}/progress/{user_id}")
                known_word_ids = set()
                if progress_response.status_code == 200:
                    progress_data = progress_response.json()
                    known_word_ids = {p['word_id'] for p in progress_data if p.get('known')}
            except Exception:
                known_word_ids = set()
            for word in st.session_state.current_words:
                col1, col2 = st.columns([3, 1])
                with col1:
                    icon = " ‚úÖ" if word['id'] in known_word_ids else ""
                    st.write(f"**{word['word']}** - {word['translation']}{icon}")
                with col2:
                    if word['id'] in known_word_ids:
                        st.button("–ó–Ω–∞—é", key=f"know_{word['id']}", disabled=True)
                    else:
                        if st.button(f"–ó–Ω–∞—é", key=f"know_{word['id']}"):
                            st.session_state.words_to_update.append({
                                "user_id": user_id,
                                "word_id": word["id"],
                                "known": True
                            })
                            st.success(f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É: {word['word']}")

        # üì§ –ì—Ä—É–ø–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
        if st.session_state.words_to_update:
            if st.button("üì§ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å"):
                progress_response = requests.post(f"{API_URL}/progress/", json=st.session_state.words_to_update)
                if progress_response.status_code == 200:
                    st.success("‚úÖ –í—Å—ñ —Å–ª–æ–≤–∞ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!")
                    st.session_state.words_to_update = []
                    st.rerun()
                else:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {progress_response.text}")

        # üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—É
        if st.button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å"):
            try:
                progress_response = requests.get(f"{API_URL}/progress/{user_id}")

                if progress_response.status_code == 200:
                    progress_data = progress_response.json()
                    if not progress_data:
                        st.warning("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –≤–∏–≤—á–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.")
                    else:
                        st.success("‚úÖ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å:")
                        # Create a mapping from word_id to word/translation
                        word_map = {w['id']: w for w in st.session_state.current_words}
                        for progress in progress_data:
                            word = word_map.get(progress['word_id'])
                            if word:
                                st.write(f"–°–ª–æ–≤–æ {word['word']} ({word['translation']}) - –í–∏–≤—á–µ–Ω–æ ‚úÖ")
                            else:
                                st.write(f"–°–ª–æ–≤–æ ID: {progress['word_id']} - –í–∏–≤—á–µ–Ω–æ ‚úÖ")
                else:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É: {progress_response.text}")

            except ValueError:
                st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")

    with tab2:
        st.header("üéØ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Å—ñ—ó
        if 'quiz_words' not in st.session_state:
            st.session_state.quiz_words = []
        if 'current_question' not in st.session_state:
            st.session_state.current_question = 0
        if 'score' not in st.session_state:
            st.session_state.score = 0
        if 'show_result' not in st.session_state:
            st.session_state.show_result = False
        if 'selected_answer' not in st.session_state:
            st.session_state.selected_answer = None
        if 'is_correct' not in st.session_state:
            st.session_state.is_correct = None
        if 'current_options' not in st.session_state:
            st.session_state.current_options = None
        if 'quiz_completed' not in st.session_state:
            st.session_state.quiz_completed = False
        
        # –í–∏–±—ñ—Ä —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        difficulty = st.radio("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:", ["easy", "medium", "hard"])
        
        if st.button("–ü–æ—á–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É"):
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏
            response = requests.get(f"{API_URL}/words/{difficulty}")
            if response.status_code == 200:
                all_words = response.json()
                # –í–∏–±–∏—Ä–∞—î–º–æ 10 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å–ª—ñ–≤
                st.session_state.quiz_words = random.sample(all_words, min(10, len(all_words)))
                st.session_state.current_question = 0
                st.session_state.score = 0
                st.session_state.show_result = False
                st.session_state.selected_answer = None
                st.session_state.is_correct = None
                st.session_state.current_options = None
                st.session_state.quiz_completed = False
                st.rerun()
            else:
                st.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ª—ñ–≤")
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
        if st.session_state.quiz_words and not st.session_state.quiz_completed:
            current_word = st.session_state.quiz_words[st.session_state.current_question]
            
            st.write(f"### –ü–∏—Ç–∞–Ω–Ω—è {st.session_state.current_question + 1} –∑ {len(st.session_state.quiz_words)}")
            st.write(f"**–°–ª–æ–≤–æ:** {current_word['word']}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            if st.session_state.current_options is None:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
                all_translations = [w['translation'] for w in st.session_state.quiz_words]
                # –í–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                correct_answer = current_word['translation']
                # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–≤–∏–∫–ª—é—á–∞—é—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É)
                wrong_answers = [t for t in all_translations if t != correct_answer]
                # –ë–µ—Ä–µ–º–æ 3 –≤–∏–ø–∞–¥–∫–æ–≤—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                wrong_answers = random.sample(wrong_answers, min(3, len(wrong_answers)))
                # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
                options = [correct_answer] + wrong_answers
                # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
                random.shuffle(options)
                st.session_state.current_options = options
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            selected_answer = st.radio(
                "–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥:",
                st.session_state.current_options,
                key=f"answer_{st.session_state.current_question}",
                disabled=st.session_state.show_result
            )
            
            if st.session_state.show_result:
                if st.session_state.is_correct:
                    st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
                else:
                    st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {current_word['translation']}")
                
                if st.button("–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"):
                    st.session_state.current_question += 1
                    st.session_state.show_result = False
                    st.session_state.selected_answer = None
                    st.session_state.is_correct = None
                    st.session_state.current_options = None
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—î –ø–∏—Ç–∞–Ω–Ω—è
                    if st.session_state.current_question >= len(st.session_state.quiz_words):
                        st.session_state.quiz_completed = True
                        # Do NOT submit results or rerun here; handle in quiz_completed block
                    else:
                        st.rerun()
            else:
                if st.button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"):
                    st.session_state.show_result = True
                    st.session_state.selected_answer = selected_answer
                    st.session_state.is_correct = selected_answer == current_word['translation']
                    if st.session_state.is_correct:
                        st.session_state.score += 1
                    st.rerun()
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏
        if st.session_state.quiz_completed:
            st.success("üéâ –í—ñ–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            st.write(f"### –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {st.session_state.score}/{len(st.session_state.quiz_words)}")
            percentage = (st.session_state.score / len(st.session_state.quiz_words)) * 100
            st.write(f"–í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {percentage:.1f}%")
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ –ª–∏—à–µ —è–∫—â–æ —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
            if not st.session_state.get('quiz_result_submitted', False):
                if st.session_state.user_id is None:
                    st.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                    if st.button("–ü–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"):
                        st.session_state.clear()
                        st.rerun()
                else:
                    quiz_result = {
                        "user_id": st.session_state.user_id,
                        "total_questions": len(st.session_state.quiz_words),
                        "correct_answers": st.session_state.score,
                        "wrong_answers": len(st.session_state.quiz_words) - st.session_state.score
                    }
                    try:
                        response = requests.post(f"{API_URL}/quiz-results/", json=quiz_result)
                        if response.status_code == 200:
                            st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
                            st.session_state.quiz_result_submitted = True
                        elif response.status_code == 404:
                            st.error("‚ùå –ü–æ–º–∏–ª–∫–∞: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                            if st.button("–ü–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É"):
                                st.session_state.clear()
                                st.rerun()
                        else:
                            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {response.text}")
                    except Exception as e:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {str(e)}")
            if st.button("–ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É"):
                st.session_state.quiz_words = []
                st.session_state.current_question = 0
                st.session_state.score = 0
                st.session_state.show_result = False
                st.session_state.selected_answer = None
                st.session_state.is_correct = None
                st.session_state.current_options = None
                st.session_state.quiz_completed = False
                st.session_state.quiz_result_submitted = False
                st.rerun()

    with tab3:
        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏")
        
        if st.session_state.username:
            try:
                # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ª–∞–≥–æ–¥–∂—É–≤–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
                # st.write("Debug Information:")
                # st.write(f"Username: {st.session_state.get('username', 'Not set')}")
                # st.write(f"User ID: {st.session_state.get('user_id', 'Not set')}")
                # st.write(f"Role: {st.session_state.get('role', 'Not set')}")
                
                # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                test_response = requests.get(f"{API_URL}/test-stats/{st.session_state.username}")
                st.write(f"Test response: {test_response.text}")
                
                if test_response.status_code == 200:
                    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î, –æ—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    response = requests.get(f"{API_URL}/stats/{st.session_state.username}")
                    st.write(f"Stats response status: {response.status_code}")
                    # Remove or comment out the next line to avoid dumping all stats
                    # st.write(f"Stats response text: {response.text}")
                    
                    if response.status_code == 200:
                        stats = response.json()
                        # Only show the 10 most recent results
                        stats = sorted(stats, key=lambda x: x['date'], reverse=True)[:10]
                        st.write(f"Stats data: Showing {len(stats)} most recent results")
                        
                        if stats:
                            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            total_quizzes = len(stats)
                            total_questions = sum(quiz["total_questions"] for quiz in stats)
                            total_correct = sum(quiz["correct_answers"] for quiz in stats)
                            total_wrong = sum(quiz["wrong_answers"] for quiz in stats)
                            
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("–í—Å—å–æ–≥–æ –≤—ñ–∫—Ç–æ—Ä–∏–Ω", total_quizzes)
                            with col2:
                                st.metric("–í—Å—å–æ–≥–æ –ø–∏—Ç–∞–Ω—å", total_questions)
                            with col3:
                                st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π", total_correct)
                            with col4:
                                st.metric("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π", total_wrong)
                            
                            # –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                            if total_questions > 0:
                                correct_percentage = (total_correct / total_questions) * 100
                                st.progress(correct_percentage / 100)
                                st.write(f"–í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct_percentage:.1f}%")
                            
                            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–∂–Ω—ñ–π –≤—ñ–∫—Ç–æ—Ä–∏–Ω—ñ
                            st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                            for i, quiz in enumerate(stats, 1):
                                with st.expander(f"–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ {i} –≤—ñ–¥ {quiz['date']}"):
                                    st.write(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å: {quiz['total_questions']}")
                                    st.write(f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {quiz['correct_answers']}")
                                    st.write(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {quiz['wrong_answers']}")
                                    if quiz['total_questions'] > 0:
                                        quiz_percentage = (quiz['correct_answers'] / quiz['total_questions']) * 100
                                        st.progress(quiz_percentage / 100)
                                        st.write(f"–í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {quiz_percentage:.1f}%")
                        else:
                            st.info("üëã –í—ñ—Ç–∞—î–º–æ! –ü–æ—á–Ω—ñ—Ç—å –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.")
                    else:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}")
                else:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {test_response.text}")
            except Exception as e:
                st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        else:
            st.warning("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
